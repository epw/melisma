(eval-when (:compile-toplevel :load-toplevel :execute)
  (unless (find-package :eric)
    (ql:quickload "eric"))
  (unless (find-package :melisma)
    (load (compile-file "/home/eric/projects/melisma/melisma.lisp"))))

(defpackage #:song
  (:use #:cl #:melisma)
  (:export #:main))

(in-package #:song)

(defun theme (key)
  (let ((*base-pitch* (copy-base-pitch *default-voice* (+ (base-pitch-for-voice *default-voice*) key))))
    (n (major-degree 8) 1)
    (n (major-degree 5) 1/2)
    (n (major-degree 8) 1/2)
    (n (major-degree 5) 1)
    (n (major-degree 1) 1)))

(defun main ()
  (make-music 130 ((melody (make-voice :instrument "acoustic grand"))
		   bass)
    (let ((*base-pitch* (list melody (+ /C 12))))
      (theme /C)
      (theme /C)
      (theme /D)
      (theme /D)
      (voice-catch-up bass)
      (theme /C)
      (n (major-chord /C) 1 bass)
      (r 3 bass)

      (theme /C)
      (n (major-chord /C) 1 bass)
      (r 1 bass)
      (n (major-chord /C) 1 bass)
      (r 1 bass)
      (n (major-chord /C) 5 bass)
      (theme /G)

      (let ((*base-pitch* (copy-base-pitch *default-voice* (+ (base-pitch-for-voice *default-voice*) 24))))
	(n (major-degree 1) 1/4)
	(n (major-degree 1) 1/4)
	(n (major-degree 5) 1/2)
	(n (major-degree 1) 1/2)
	(n (major-degree 5) 1))
      )))

(main)
